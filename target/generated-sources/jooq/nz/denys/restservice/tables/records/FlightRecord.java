/**
 * This class is generated by jOOQ
 */
package nz.denys.restservice.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import nz.denys.restservice.tables.Flight;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlightRecord extends UpdatableRecordImpl<FlightRecord> implements Record3<Long, String, Timestamp> {

	private static final long serialVersionUID = -1063705908;

	/**
	 * Setter for <code>flight.flight.id</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>flight.flight.id</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>flight.flight.flight_name</code>.
	 */
	public void setFlightName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>flight.flight.flight_name</code>.
	 */
	public String getFlightName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>flight.flight.departure</code>.
	 */
	public void setDeparture(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>flight.flight.departure</code>.
	 */
	public Timestamp getDeparture() {
		return (Timestamp) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, String, Timestamp> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, String, Timestamp> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Flight.FLIGHT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Flight.FLIGHT.FLIGHT_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Flight.FLIGHT.DEPARTURE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getFlightName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getDeparture();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlightRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlightRecord value2(String value) {
		setFlightName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlightRecord value3(Timestamp value) {
		setDeparture(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FlightRecord values(Long value1, String value2, Timestamp value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached FlightRecord
	 */
	public FlightRecord() {
		super(Flight.FLIGHT);
	}

	/**
	 * Create a detached, initialised FlightRecord
	 */
	public FlightRecord(Long id, String flightName, Timestamp departure) {
		super(Flight.FLIGHT);

		setValue(0, id);
		setValue(1, flightName);
		setValue(2, departure);
	}
}
